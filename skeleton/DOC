EECS 343 Project 2 - 2014 Fall

Kernel Memory Allocation

Authors: Jin Sun (jsy833), Yuchao Zhou (yzr736)

Algorithms: Implement resource map (kma_rm), buddy system (kma_bud) and simple power of 2 free list (kma_p2fl).

Implementation Summary:
Resource Map:
Resource map is a set of <base, size> value pairs to indicate free memory of the page. Base value indicates the starting address of the page pool and size means the size of the buffer. Here we only implement the First fit policy which is find the first fit space in the free list to allocate memory request.

P2FL:
For the power-of-two free lists algorithm, we create a set of free lists which the 2*m. For example, ll32, ll64, ll128, ll256... When encounter memory request, we will look up the corresponding free list by compare the size requested by the user with the size of the free lists. We will find the corresponding free list and find a free buffer for it.

Buddy System:
kma_malloc: First, we should find out what's the cloest size to the size we want to allocate. Then allocate a piece. When allocating, we should first decide if we want to get a new page, or make recursize call to the right size and break it down to two buffers. After allocation, just return buffer.
Kma_free: kma_free require us to recurssivly free buffer and merge with its buddy. When freeing, first we need to find its buddy, if the buddy is not used, merge them and free the whole piece by recursice call.


Algorithm comparison:
After we use the competitaion, we found that P2FL is faster then Buddy System and Buddy System is faster then Resource Map. However for the memory utilization Buddy System is higher than P2FL, and P2FL is higher than Resource Map.

For memory utilization, due to P2FL divided into several size of free list so it has less chunks than RM. but for Buddy System, due to it has the merge two small free buffer into a one bigger buffer. As a result, its memory utilization is the highest one among these three algorithm.

For the speed, the Resource map only has one free list, so it will take a signification time to traverse the list to find the suitable free buffer. But for the P2FL due to it has a set of separate lists so the traverseing time is smaller than resouce map. For the buddy system it needs to break git buffer into two smaller buffers. So it will be longer than P2FL but definately much less then the resource map.
